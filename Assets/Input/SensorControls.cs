//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Input/SensorControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Input/SensorControls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @SensorControls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @SensorControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SensorControls"",
    ""maps"": [
        {
            ""name"": ""Recorder"",
            ""id"": ""9a88c6c7-c427-4bc5-9a76-4f6c8c9e7d3a"",
            ""actions"": [
                {
                    ""name"": ""Capture"",
                    ""type"": ""Button"",
                    ""id"": ""2f89c0c7-17c4-4d4a-9c3a-c3b48b7e3b1a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleRecording"",
                    ""type"": ""Button"",
                    ""id"": ""3f89c0c7-17c4-4d4a-9c3a-c3b48b7e3b1b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayAnimation1"",
                    ""type"": ""Button"",
                    ""id"": ""ce7d67a6-ea67-47d8-9419-3d70c8bdeb7a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayAnimation2"",
                    ""type"": ""Button"",
                    ""id"": ""1429a57a-02df-4f97-9606-d20073bef55f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayAnimationIdle"",
                    ""type"": ""Button"",
                    ""id"": ""d74bc9cf-eb3e-4b59-9311-53506c5d3184"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f89c0c7-17c4-4d4a-9c3a-c3b48b7e3b1c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Capture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f89c0c7-17c4-4d4a-9c3a-c3b48b7e3b1d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleRecording"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee6eac02-8ccf-44b2-86a4-038d9f8e52d8"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayAnimation1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78cd7383-3ae2-40be-9f41-ce0ec55a4188"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayAnimation2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c776d1c7-089d-4317-984b-7dcf7ec6e8d4"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayAnimationIdle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Recorder
        m_Recorder = asset.FindActionMap("Recorder", throwIfNotFound: true);
        m_Recorder_Capture = m_Recorder.FindAction("Capture", throwIfNotFound: true);
        m_Recorder_ToggleRecording = m_Recorder.FindAction("ToggleRecording", throwIfNotFound: true);
        m_Recorder_PlayAnimation1 = m_Recorder.FindAction("PlayAnimation1", throwIfNotFound: true);
        m_Recorder_PlayAnimation2 = m_Recorder.FindAction("PlayAnimation2", throwIfNotFound: true);
        m_Recorder_PlayAnimationIdle = m_Recorder.FindAction("PlayAnimationIdle", throwIfNotFound: true);
    }

    ~@SensorControls()
    {
        UnityEngine.Debug.Assert(!m_Recorder.enabled, "This will cause a leak and performance issues, SensorControls.Recorder.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Recorder
    private readonly InputActionMap m_Recorder;
    private List<IRecorderActions> m_RecorderActionsCallbackInterfaces = new List<IRecorderActions>();
    private readonly InputAction m_Recorder_Capture;
    private readonly InputAction m_Recorder_ToggleRecording;
    private readonly InputAction m_Recorder_PlayAnimation1;
    private readonly InputAction m_Recorder_PlayAnimation2;
    private readonly InputAction m_Recorder_PlayAnimationIdle;
    /// <summary>
    /// Provides access to input actions defined in input action map "Recorder".
    /// </summary>
    public struct RecorderActions
    {
        private @SensorControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public RecorderActions(@SensorControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Recorder/Capture".
        /// </summary>
        public InputAction @Capture => m_Wrapper.m_Recorder_Capture;
        /// <summary>
        /// Provides access to the underlying input action "Recorder/ToggleRecording".
        /// </summary>
        public InputAction @ToggleRecording => m_Wrapper.m_Recorder_ToggleRecording;
        /// <summary>
        /// Provides access to the underlying input action "Recorder/PlayAnimation1".
        /// </summary>
        public InputAction @PlayAnimation1 => m_Wrapper.m_Recorder_PlayAnimation1;
        /// <summary>
        /// Provides access to the underlying input action "Recorder/PlayAnimation2".
        /// </summary>
        public InputAction @PlayAnimation2 => m_Wrapper.m_Recorder_PlayAnimation2;
        /// <summary>
        /// Provides access to the underlying input action "Recorder/PlayAnimationIdle".
        /// </summary>
        public InputAction @PlayAnimationIdle => m_Wrapper.m_Recorder_PlayAnimationIdle;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Recorder; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="RecorderActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(RecorderActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="RecorderActions" />
        public void AddCallbacks(IRecorderActions instance)
        {
            if (instance == null || m_Wrapper.m_RecorderActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RecorderActionsCallbackInterfaces.Add(instance);
            @Capture.started += instance.OnCapture;
            @Capture.performed += instance.OnCapture;
            @Capture.canceled += instance.OnCapture;
            @ToggleRecording.started += instance.OnToggleRecording;
            @ToggleRecording.performed += instance.OnToggleRecording;
            @ToggleRecording.canceled += instance.OnToggleRecording;
            @PlayAnimation1.started += instance.OnPlayAnimation1;
            @PlayAnimation1.performed += instance.OnPlayAnimation1;
            @PlayAnimation1.canceled += instance.OnPlayAnimation1;
            @PlayAnimation2.started += instance.OnPlayAnimation2;
            @PlayAnimation2.performed += instance.OnPlayAnimation2;
            @PlayAnimation2.canceled += instance.OnPlayAnimation2;
            @PlayAnimationIdle.started += instance.OnPlayAnimationIdle;
            @PlayAnimationIdle.performed += instance.OnPlayAnimationIdle;
            @PlayAnimationIdle.canceled += instance.OnPlayAnimationIdle;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="RecorderActions" />
        private void UnregisterCallbacks(IRecorderActions instance)
        {
            @Capture.started -= instance.OnCapture;
            @Capture.performed -= instance.OnCapture;
            @Capture.canceled -= instance.OnCapture;
            @ToggleRecording.started -= instance.OnToggleRecording;
            @ToggleRecording.performed -= instance.OnToggleRecording;
            @ToggleRecording.canceled -= instance.OnToggleRecording;
            @PlayAnimation1.started -= instance.OnPlayAnimation1;
            @PlayAnimation1.performed -= instance.OnPlayAnimation1;
            @PlayAnimation1.canceled -= instance.OnPlayAnimation1;
            @PlayAnimation2.started -= instance.OnPlayAnimation2;
            @PlayAnimation2.performed -= instance.OnPlayAnimation2;
            @PlayAnimation2.canceled -= instance.OnPlayAnimation2;
            @PlayAnimationIdle.started -= instance.OnPlayAnimationIdle;
            @PlayAnimationIdle.performed -= instance.OnPlayAnimationIdle;
            @PlayAnimationIdle.canceled -= instance.OnPlayAnimationIdle;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="RecorderActions.UnregisterCallbacks(IRecorderActions)" />.
        /// </summary>
        /// <seealso cref="RecorderActions.UnregisterCallbacks(IRecorderActions)" />
        public void RemoveCallbacks(IRecorderActions instance)
        {
            if (m_Wrapper.m_RecorderActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="RecorderActions.AddCallbacks(IRecorderActions)" />
        /// <seealso cref="RecorderActions.RemoveCallbacks(IRecorderActions)" />
        /// <seealso cref="RecorderActions.UnregisterCallbacks(IRecorderActions)" />
        public void SetCallbacks(IRecorderActions instance)
        {
            foreach (var item in m_Wrapper.m_RecorderActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RecorderActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="RecorderActions" /> instance referencing this action map.
    /// </summary>
    public RecorderActions @Recorder => new RecorderActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Recorder" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="RecorderActions.AddCallbacks(IRecorderActions)" />
    /// <seealso cref="RecorderActions.RemoveCallbacks(IRecorderActions)" />
    public interface IRecorderActions
    {
        /// <summary>
        /// Method invoked when associated input action "Capture" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCapture(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ToggleRecording" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToggleRecording(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PlayAnimation1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayAnimation1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PlayAnimation2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayAnimation2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PlayAnimationIdle" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayAnimationIdle(InputAction.CallbackContext context);
    }
}
